//
// Generated by dtk
// Translation Unit: d_camera.cpp
//

#include "d/d_camera.h"
#include "d/d_bg_s_gnd_chk.h"
#include "d/d_bg_s_lin_chk.h"
#include "d/d_bg_s_sph_chk.h"
#include "SSystem/SComponent/c_bg_s.h"
#include "dolphin/types.h"
#include "SSystem/SComponent/c_math.h"
#include "d/actor/d_a_obj_pirateship.h"
#include "m_Do/m_Do_controller_pad.h"
#include "f_op/f_op_camera.h"
#include "f_op/f_op_camera_mng.h"
#include "d/d_com_lib_game.h"
#include "m_Do/m_Do_graphic.h"
#include "f_ap/f_ap_game.h"

class camera_process_class;

/* 80161790-801618B8       .text __ct__9dCamera_cFP12camera_class */
dCamera_c::dCamera_c(camera_class*) : mCamParam(0) {
    /* Nonmatching */
}

/* 801618B8-80161994       .text __dt__9dCamera_cFv */
dCamera_c::~dCamera_c() {
    /* Nonmatching */
}

/* 80161994-80162128       .text initialize__9dCamera_cFP12camera_classP10fopAc_ac_cUlUl */
void dCamera_c::initialize(camera_class* camera, fopAc_ac_c* playerActor, u32 cameraInfoIdx, u32 padId) {
    /* Nonmatching */
    int mapToolType;
    stage_stag_info_class* pStagInfo;
    cXyz local_30;
    
    mpCamera = camera;
    m004 = 1;
    m005 = 0;

    mpPlayerActor = playerActor;
    mCameraInfoIdx = cameraInfoIdx;
    mPadId = padId;

    initMonitor();
    initPad();
    mForcusLine.Init();

    mCamTypeField = GetCameraTypeFromCameraName("Field");
    mCamTypeEvent = GetCameraTypeFromCameraName("Event");
    mCamTypeWater = GetCameraTypeFromCameraName("Water");
    m774 = GetCameraTypeFromCameraName("Subject"); // Should be renamed to mCamTypeSubject?
    mCamTypeBoat = GetCameraTypeFromCameraName("Boat");
    mCamTypeBoatBattle = GetCameraTypeFromCameraName("BoatBattle");
    mCamTypeRestrict = GetCameraTypeFromCameraName("Restrict");
    mCamTypeKeep = GetCameraTypeFromCameraName("Keep");
    mCurType = mMapToolType = mCamTypeField;

    m524 = 0xFF;
    m528 = 0;
    m258 = 0;
    m254 = 0;
    m248[0] = 0x85e;
    m248[1] = 0x828;
    m248[2] = 0x381b;
    mCurMode = 0;
    m144 = 1;
    m514 = 0;
    m14C = 0.0f;
    mEventFlags = 0;
    m148 = cSAngle::_0;
    m07C = 0;
    m080 = cM_rndFX(32767.0f);
    m064 = 1.0f;
    m5F4 = 0.0f;
    mTrimHeight = 0.0f;
    mTrimSize = 0;
    mTrimTypeForce = -1;
    pStagInfo = (stage_stag_info_class *)dComIfGp_getStageStagInfo();
    if (pStagInfo && pStagInfo->mCameraMapToolID != -1) {
        mapToolType = GetCameraTypeFromMapToolID(pStagInfo->mCameraMapToolID, -1);
        if (mapToolType != 0xFF && Chtyp(mapToolType)) {
            mMapToolType = mapToolType;
        }
    }
    mCurStyle = types[mCurType].mStyles[0][mCurMode];
    mLockOnActorId = -1;
    mStageMapToolCameraIdx = 0xFF;
    m0E8 = -1;
    m40C = -1;
    m410 = -1;
    mStaffIdx = -1;
    m404 = -1;
    mRoomNo = -1;
    m318 = -1e+09f;
    m310 = -1e+09f;
    mBG.m58 = -1e+09f;
    mBG.m04.OffNormalGrp();
    mBG.m04.OnWaterGrp();
    m31D = 0;
    m31C = 0;
    m32C = cXyz::Zero;
    m320 = m32C;
    m33C = 0;
    m33A = cSAngle::_0;
    m338 = m33A;
    m350 = 0;
    m364 = 0;
    m368 = 0.0f;
    m354 = -1e+09f;
    mRoomMapToolCameraIdx = 0xFF;
    m608 = mCamSetup.mBGChk.WallUpDistance();

    if (!strcmp(dComIfGp_getStartStageName(), "sea")) {
        m780 = 1;
    }
    else {
        m780 = 0;
    }

    if (!strcmp(dComIfGp_getStartStageName(), "kaze")) {
        m788 = 1;
    }
    else {
        m788 = 0;
    }

    if (!strcmp(dComIfGp_getStartStageName(), "M_Dai")) {
        m789 = 1;
    }
    else {
        m789 = 0;
    }

    if (!strcmp(dComIfGp_getStartStageName(), "kazeB")) {
        m78B = 1;
    }
    else {
        m78B = 0;
    }
    
    if (!strcmp(dComIfGp_getStartStageName(), "GanonK")) {
        m784 = 1;
    }
    else {
        m784 = 0;
    }

    if (!strcmp(dComIfGp_getStartStageName(), "GTower")) {
        m785 = 1;
    }
    else {
        m785 = 0;
    }

    if (!(strcmp(dComIfGp_getStartStageName(), "Asoko") && 
          strcmp(dComIfGp_getStartStageName(), "Abship") && 
          strcmp(dComIfGp_getStartStageName(), "PShip"))) {
        m781 = 1;
    }
    else {
        m781 = 0;
    }

    if (!strcmp(dComIfGp_getStartStageName(), "Obshop")) {
        m782 = 1;
    }
    else {
        m782 = 0;
    }

    if (!strcmp(dComIfGp_getStartStageName(), "A_umikz")) {
        m783 = 1;
    }
    else {
        m783 = 0;
    }
    
    m534 = 0;
    m536 = 0x180;

    if (m781) {
        m530 = 1;
        m540 = 1.0f;
        m538 = daObjPirateship::getShipOffsetY(&m534, &m536, 130.0f);
        m538 *= m540;
    }
    else if (m782) {
        m530 = 2;
        m540 = 0.12f;
        m538 = daObjPirateship::getShipOffsetY(&m534, &m536, 130.0f);
        m538 *= m540;
    }
    else if (m783) {
        m530 = 3;
        m540 = 1.0f;
        m538 = daObjPirateship::getShipOffsetY(&m534, &m536, 130.0f);;
        m538 *= m540;
    }
    else {
        m530 = 0;
        m538 = 0.0f;
        m540 = 0.0f;
    }

    mCamParam.Change(mCurStyle);

    local_30 = attentionPos(mpPlayerActor);
    local_30.y += mCamParam.CenterHeight(0.0f);

    m044 = local_30 + cSGlobe(0.0f, cSAngle((s16)0), directionOf((fopAc_ac_c *)this)).Xyz();

    mCenter = m044;

    m03C.Val(200.0f, 0, directionOf((fopAc_ac_c *)this).Inv());

    mDistance = m03C.R();

    m00C = m03C.V();

    mNextCsAngle = m03C.U();

    m050 =  m044 + m03C.Xyz();

    mEye = m050;

    mAngleY = cSAngle(mNextCsAngle.Inv());

    mUp.x = 0.0f;
    mUp.y = 1.0f;
    mUp.z = 0.0f;

    mBank = cSAngle::_0;

    m05C = mBank;

    m060 = mFovY = mCamParam.Fovy(0.0f);

    m220 = 0;
}

/* 80162128-80162134       .text Start__9dCamera_cFv */
void dCamera_c::Start() {
    m004 = 1;
}

/* 80162134-80162140       .text Stop__9dCamera_cFv */
void dCamera_c::Stop() {
    m004 = 0;
}

/* 80162140-8016214C       .text Stay__9dCamera_cFv */
void dCamera_c::Stay() {
    m005 = 1;
}

/* 8016214C-801621A0       .text ChangeModeOK__9dCamera_cFl */
bool dCamera_c::ChangeModeOK(s32 param_1) {
    if (dComIfGp_evmng_cameraPlay() || chkFlag(0x20000000)) {
        return 0;
    }
    return !(types[mCurType].mStyles[0][param_1] < 0); // something to do with the array sizing of these variables is wrong
}

/* 801621A0-801623A0       .text initPad__9dCamera_cFv */
void dCamera_c::initPad() {
    mStickMainPosXLast = g_mDoCPd_cpadInfo[mPadId].mMainStickPosX;
    mStickMainPosYLast = g_mDoCPd_cpadInfo[mPadId].mMainStickPosY;
    mStickMainValueLast = g_mDoCPd_cpadInfo[mPadId].mMainStickValue;

    mStickMainPosXDelta = 0.0f;
    mStickMainPosYDelta = 0.0f;
    mStickMainValueDelta = 0.0f;

    mStickCPosXLast = g_mDoCPd_cpadInfo[mPadId].mCStickPosX;
    mStickCPosYLast = g_mDoCPd_cpadInfo[mPadId].mCStickPosY;
    mStickCValueLast = g_mDoCPd_cpadInfo[mPadId].mCStickValue;

    mStickCPosXDelta = 0.0f;
    mStickCPosYDelta = 0.0f;
    mStickCValueDelta = 0.0f;

    m18C = 0;
    m188 = 0;
    m184 = 0;

    mTriggerLeftLast = g_mDoCPd_cpadInfo[mPadId].mTriggerLeft;
    mTriggerLeftDelta = 0.0f;

    mHoldLockL = FALSE;
    mTrigLockL = FALSE;
    m19A = 0;
    m19B = 0;

    mTriggerRightLast = g_mDoCPd_cpadInfo[mPadId].mTriggerRight;
    mTriggerRightDelta = 0.0f;

    mHoldLockR = 0;
    mTrigLockR = 0;
    m1A6 = 0;
    m1A7 = 0;

    mHoldX = (bool)CPad_CHECK_HOLD_X(mPadId);
    mTrigX = (bool)CPad_CHECK_TRIG_X(mPadId);

    mHoldY = (bool)CPad_CHECK_HOLD_Y(mPadId);
    mTrigY = (bool)CPad_CHECK_TRIG_Y(mPadId);

    mHoldY = (bool)CPad_CHECK_HOLD_Y(mPadId);
    mTrigY = (bool)CPad_CHECK_TRIG_Y(mPadId);

    mHoldZ = (bool)CPad_CHECK_HOLD_Z(mPadId);
    mTrigZ = (bool)CPad_CHECK_TRIG_Z(mPadId);

    m1AE = 0;
}

/* 801623A0-80162710       .text updatePad__9dCamera_cFv */
void dCamera_c::updatePad() {
    float fVar1;
    float fVar2;
    float fVar3;
    cSAngle local_48;
    
    if (chkFlag(0x1000000)) {
        fVar1 = 0.0f;
        fVar2 = 0.0f;
        fVar3 = 0.0f;
    }
    else {
        fVar1 = g_mDoCPd_cpadInfo[mPadId].mMainStickPosX;
        fVar2 = g_mDoCPd_cpadInfo[mPadId].mMainStickPosY;
        fVar3 = g_mDoCPd_cpadInfo[mPadId].mMainStickValue;
    }

    cSAngle(g_mDoCPd_cpadInfo[mPadId].mMainStickAngle); // Unused object? Code matches so perhaps a developer oversight

    mStickMainPosXDelta = fVar1 - mStickMainPosXLast;
    mStickMainPosYDelta = fVar2 - mStickMainPosYLast;
    mStickMainValueDelta = fVar3 - mStickMainValueLast;

    mStickMainPosXLast = fVar1;
    mStickMainPosYLast = fVar2;
    mStickMainValueLast = fVar3;

    if (chkFlag(0x800000)) {
        fVar1 = 0.0f;
        fVar2 = 0.0f;
        fVar3 = 0.0f;
    }
    else {
        fVar1 = g_mDoCPd_cpadInfo[mPadId].mCStickPosX;
        fVar2 = g_mDoCPd_cpadInfo[mPadId].mCStickPosY;
        fVar3 = g_mDoCPd_cpadInfo[mPadId].mCStickValue;
    }

    mStickCPosXDelta = fVar1 - mStickCPosXLast;
    mStickCPosYDelta = fVar2 - mStickCPosYLast;
    mStickCValueDelta = fVar3 - mStickCValueLast;

    mStickCPosXLast = fVar1;
    mStickCPosYLast = fVar2;
    mStickCValueLast = fVar3;

    fVar1 = g_mDoCPd_cpadInfo[mPadId].mTriggerLeft;
    mTriggerLeftDelta = mTriggerLeftLast - fVar1;
    mTriggerLeftLast = fVar1;

    mHoldLockL = (bool)g_mDoCPd_cpadInfo[mPadId].mHoldLockL;
    mTrigLockL = (bool)g_mDoCPd_cpadInfo[mPadId].mTrigLockL;

    if (mTriggerLeftLast > mCamSetup.m0A0) {
        if (m19A == 0) {
            m19B = 1;
        }
        else {
            m19B = 0;
        }
        
        m19A = 1;
    }
    else {
        m19B = 0;
        m19A = 0;
    }

    fVar1 = g_mDoCPd_cpadInfo[mPadId].mTriggerRight;
    mTriggerRightDelta = mTriggerRightLast - fVar1;
    mTriggerRightLast = fVar1;

    mHoldLockR = (bool)g_mDoCPd_cpadInfo[mPadId].mHoldLockR;
    mTrigLockR = (bool)g_mDoCPd_cpadInfo[mPadId].mTrigLockR;

    if (mTriggerRightLast > mCamSetup.m0A0) {
        if (m1A6 == 0) {
            m1A7 = 1;
        }
        else {
            m1A7 = 0;
        }
        
        m1A6 = 1;
    }
    else {
        m1A7 = 0;
        m1A6 = 0;
    }


    mHoldX = (bool)CPad_CHECK_HOLD_X(mPadId);
    mTrigX = (bool)CPad_CHECK_TRIG_X(mPadId);

    mHoldY = (bool)CPad_CHECK_HOLD_Y(mPadId);
    mTrigY = (bool)CPad_CHECK_TRIG_Y(mPadId);

    mHoldZ = (bool)CPad_CHECK_HOLD_B(mPadId); // mHoldZ might not be the appropriate name for this?
    mTrigZ = (bool)CPad_CHECK_TRIG_B(mPadId); // likewise for mTrigZ

    m1AE = 0;
}

/* 80162710-801627A4       .text initMonitor__9dCamera_cFv */
void dCamera_c::initMonitor() {
    if (mpPlayerActor) {
        mMonitorPos = positionOf(mpPlayerActor);
    }
    else {
        mMonitorPos = cXyz::Zero;
    }

    m23C = 0.0f;
    m238 = 0.0f;
    m234 = 0.0f;
    m240 = 0;
    m244 = 0.0f;
}

/* 801627A4-801628DC       .text updateMonitor__9dCamera_cFv */
void dCamera_c::updateMonitor() {
    float playerMonitorHoritzontalDist;
    cXyz playerPos;
    
    if (mpPlayerActor != NULL) {
        playerPos = positionOf(mpPlayerActor);
        if (m31D != 0) {
            dComIfG_Bgsp()->MoveBgMatrixCrrPos(mBG.m74, TRUE, &mMonitorPos, NULL, NULL);
        }
        playerMonitorHoritzontalDist = dCamMath::xyzHorizontalDistance(playerPos, mMonitorPos);
        m23C = playerMonitorHoritzontalDist - m234;
        m238 += (playerMonitorHoritzontalDist - m238) * 0.075f;
        m234 = playerMonitorHoritzontalDist;
        mMonitorPos = playerPos;
        if (!m144 && *(u16*)&g_mDoCPd_cpadInfo[0].mButtonHold == 0 && mStickMainValueLast < 0.05f && mStickCValueLast < 0.05f) { // Possible union between u16 and bitfield rather than *(u16*) cast
            m240++;
        }
        else {
            m240 = 0;
        }
        m244 = mDistance - m244;
    }
}

/* 801628DC-80163020       .text calcPeepAngle__9dCamera_cFv */
cSAngle dCamera_c::calcPeepAngle() {
    /* Nonmatching */
    dCamera_c* camera;
    cSAngle tempAng;
    cSAngle res(cSAngle::_0);
    
    if (check_owner_action(camera->mPadId, 0x20)) {
        f32 temp_30 = 30.0f;
        cXyz local_b8(0.0f, 0.0f, -temp_30);

        f32 temp_50 = 50.0f;
        cXyz local_ac(-temp_50, 0.0f, -temp_30);

        cXyz local_a0(relationalPos(camera->mpPlayerActor, &local_b8));
        cXyz local_94(relationalPos(camera->mpPlayerActor, &local_ac));

        dBgS_CamLinChk_NorWtr lin_chk;

        if (lineBGCheck(&local_94, &local_a0, &lin_chk, 0x7f)) {
            cM3dGPla* plane = dComIfG_Bgsp()->GetTriPla(lin_chk);
            tempAng = cSAngle::_90 + (cSGlobe(plane->mNormal).U() - directionOf((fopAc_ac_c *)camera)); // GetNP() doesn't work?
            res = tempAng;
        }
    }
    else if (check_owner_action(camera->mPadId, 0x40)) {
        f32 temp_30 = 30.0f;
        cXyz local_88(0.0f, 0.0f, -temp_30);

        cXyz local_7c(50.0f, 0.0f, -temp_30);

        cXyz local_70(relationalPos(camera->mpPlayerActor, &local_88));
        cXyz local_64(relationalPos(camera->mpPlayerActor, &local_7c));

        dBgS_CamLinChk_NorWtr lin_chk;
        
        if (lineBGCheck(&local_64, &local_70, &lin_chk, 0x7f)) {
            cM3dGPla* plane = dComIfG_Bgsp()->GetTriPla(lin_chk);
            tempAng = cSAngle::_270 + (cSGlobe(plane->mNormal).U() - directionOf((fopAc_ac_c *)camera));
            res = tempAng;
        }
    }
    return cSAngle(res);
}

/* 801632F0-8016336C       .text Att__9dCamera_cFv */
void dCamera_c::Att() {
    fopAc_ac_c* target;
    
    if (mpPlayerActor && !chkFlag(0x2000000)) {
        if (dComIfGp_getAttention().LockonTruth()) {
            target = dComIfGp_getAttention().LockonTarget(0);
        }
        else {
            target = NULL;
        }
        mpLockonTarget = target;
    }
}

/* 8016336C-80163514       .text checkForceLockTarget__9dCamera_cFv */
bool dCamera_c::checkForceLockTarget() {
    bool res = TRUE;
    if (mLockOnActorId != -1) {
        mpLockonActor = GetForceLockOnActor();
        if (mpLockonActor) {
            if (dComIfGp_getAttention().Lockon() || mForceLockTimer > mCamSetup.ForceLockOffTimer() ||
                cXyz(positionOf(mpLockonActor) - positionOf(mpPlayerActor)).abs() > mCamSetup.ForceLockOffDist()) {
                res = FALSE;
            }
        }
        else {
            res = FALSE;
        }
    }
    else {
        res = FALSE;
    }
    return res;
}

/* 80163514-80163EF4       .text Run__9dCamera_cFv */
bool dCamera_c::Run() {
    /* Nonmatching */
    float fVar1;
    u16 uVar2;
    float fVar3;
    bool bVar4;
    uint uVar5;
    char cVar9;
    int iVar6;
    dDemo_camera_c *pdVar7;
    short sVar8;
    long next;
    uint uVar10;
    dCamera_c *pdVar11;
    double dVar12;
    cSAngle local_58 ;
    cSAngle local_54 ;
    cSAngle local_50 ;
    short local_4c;
    cSAngle acStack_48;
    cSAngle local_44 ;
    cSAngle local_40 ;
    cSAngle acStack_3c ;
    cSAngle acStack_38 ;
    cSAngle acStack_34 ;
    cSAngle local_30;
    cSAngle local_2c;
    cSAngle local_28;
    cSAngle local_24;

    bool bVar9 = FALSE;
    
    pdVar11 = (dCamera_c *)0x0;

    mForcusLine.Off();

    clrFlag(~(0xefeb63fe));

    checkSpecialArea();

    checkGroundInfo();

    if (m530 && !chkFlag(0x200000)) { // wrong flag, accessing same bit (21) but doesn't work for some reason
        if (!(dComIfGp_evmng_cameraPlay() || chkFlag(0x20000000))) {
            fVar1 = daObjPirateship::getShipOffsetY(&m534, &m536, 130.0f) * m540; //regswap
            fVar3 = fVar1 - m538;
            if (((m530 == 1) && (m53C < 0.0f)) && (fVar3 > 0.0f)) {
                m254 |= 4;
            }
            m53C = fVar3;
            m538 = fVar1;
            m044.y -= m53C * mCamSetup.mManualStartCThreshold;
        }
    }

    updateMonitor();

    Att();

    dComIfGp_offCameraAttentionStatus(mCameraInfoIdx, 0x3400);

    if (!(dComIfGp_evmng_cameraPlay() || chkFlag(0x20000000))) {
        updatePad();
        mCamSetup.mCstick.Shift(mPadId);
    }
    
    if (dComIfGp_getMiniGameType() == 8) {
        updatePad();
        mCamSetup.mCstick.Shift(mPadId);
    }
    
    if (dComIfGp_getAttention().Lockon()) {
        setFlag(0x1000);
    }
    
    if (!checkForceLockTarget()) {
        mLockOnActorId = -1;
    }
    else {
        mForceLockTimer++;
    }
    
    mNextType = nextType(mCurType);

    if (mNextType != mCurType && onTypeChange(mCurType, mNextType)) {
        mCurType = mNextType;
    }

    mNextMode = nextMode(mCurMode);
    next = mNextMode;

    if (next != mCurMode) {
        if (types[mCurType].mStyles[0][next] >= 0 && onModeChange(mCurMode, next)) {
            mCurMode = mNextMode;
        }
    }

    if (types[mCurType].mStyles[0][mCurMode] < 0) {
        mCurMode = 0;
    }

    short curStyle = types[mCurType].mStyles[0][mCurMode];
    if (curStyle >= 0) {
        if (mCurStyle != curStyle && onStyleChange(mCurStyle, curStyle)) {
            mCurStyle = (int)types[mCurType].mStyles[0][mCurMode];
            mCamParam.Change(mCurStyle);
        }
    }
    
    clrFlag(0x20);

    if (mCurMode == 0xc) {
        setFlag(0x20);
    }

    clrFlag(0x80000000);
    dComIfGp_offCameraAttentionStatus(mCameraInfoIdx, 0x80);
    if (mCamParam.CheckFlag(4) && !check_owner_action(mPadId, 0x4000000) && !check_owner_action1(mPadId, 0x40000)) {
        m148 += (forwardCheckAngle() - m148) * mCamSetup.mBGChk.FwdCushion();
    }
    else {
        m148 = cSAngle::_0;
    }

    defaultTriming();

    mTrimTypeForce = -1;
    m068 = 9;
    
    if (chkFlag(0x200000) && dCamParam_c::styles[mCurStyle].engineIdx != 11) {
        if (g_mDoCPd_cpadInfo[mPadId].mMainStickValue <= 0.001f) {
            if (g_mDoCPd_cpadInfo[mPadId].mCStickValue <= 0.001f) {
                if (g_mDoCPd_cpadInfo[mPadId].mButtonHold.a && g_mDoCPd_cpadInfo[mPadId].mButtonTrig.a) {
                    bVar4 = false;
                }
                else {
                    bVar4 = true;
                }
            }
            else {
                bVar4 = true;
            }
        }
        else {
            bVar4 = true;
        }

        if (!bVar4) {
            if (m234 <= 10.0f && m360 != 0 && m31C == 0) {
                clrFlag(0x200000);
            }
        }
    }
    else {
        pdVar7 = g_dComIfG_gameInfo.play.mDemo->getObject()->getActiveCamera();

        if (pdVar7) {
            if (mCamParam.Algorythmn(mCurStyle) != 11) {
                pdVar11 = (dCamera_c *)demoCamera(0);
            }
        }
        pdVar11 = this;
        bVar9 = (this->*engine_tbl[dCamParam_c::styles[mCurStyle].engineIdx])(mCurStyle);
        m07C++;
        m080++;
        m118++;
        m108++;
        m11C++;
    }

    if (!bVar9) {
        m514 = 0;
    }

    if (!chkFlag(0x400)) {
        m05C -= m05C * 0.05f;
    }

    shakeCamera();

    clrFlag(0x90080);

    if (mCamParam.CheckFlag(1)) {
        m068 = 0x3F;
    }
    else if (mCamParam.CheckFlag(2)) {
        m068 = 0xF;
    }

    if (mCamParam.CheckFlag(0x400)) {
        m068 |= 0x40;
    }

    fVar1 = m354 + mCamSetup.mBGChk.FloorMargin();

    if (m044.y < fVar1) {
        mCenter.x = m044.x;
        mCenter.z = m044.z;
        if ((dCamParam_c::styles[mCurStyle].engineIdx == 4) && chkFlag(0x10000800)) {
            m068 &= 0xfffffff7;
            mCenter.y = m044.y;
        }
        else {
            mCenter.y = fVar1;
        }
    }
    else {
        mCenter = m044;
    }
    mFovY = m060;

    mBank = m05C;

    bumpCheck(m068);

    local_24 = cSAngle(g_mDoCPd_cpadInfo[mPadId].mMainStickAngle) - m224;
    if (mStickMainValueLast < mCamSetup.m088 && ((local_24.Val() < 0) != (local_40.Val() < 0) || (cSAngle(-mCamSetup.m08C).Val() < 0) != (local_24.Val() < 0))) {
        local_40 = cSAngle(mCamSetup.m08C);
    }
    else {
        m220 = 0;
    }

    if (m220) {
        mAngleY = getDMCAngle(cSAngle(g_mDoCPd_cpadInfo[mPadId].mMainStickAngle));
    }
    else {
        mAngleY = cSAngle(mNextCsAngle.Inv());
    }

    if (mCenter.x == mEye.x && mCenter.z == mEye.z) {
        mUp.x = 0.01f;
        mUp.y = 1.0f;
        mUp.z = 0.0f;
    }
    else if (m006.Val() >= cSAngle(-90.0f).Val() && m00C.Val() <= cSAngle(90.0f).Val()) {
        mUp.x = 0.0f;
        mUp.y = 1.0f;
        mUp.z = 0.0f;
    }
    else {
        mUp.x = 0.0f;
        mUp.y = -1.0f;
        mUp.z = 0.0f;
    }

    for (u32 i = 0; i < 3; i++) {
        bool playSound = FALSE;
        if (m254 & uVar5 && (m258 & uVar5) == 0) {
            playSound = TRUE;
        }
        if (playSound) {
            mDoAud_seStart(m248[i]);
        }
    }

    m258 = m254;
    bVar4 = FALSE;
    m254 = 0;

    if (m100 && m101 && m102) {
        bVar4 = TRUE;
    }

    if (bVar4) {
        dComIfGp_onCameraAttentionStatus(mCameraInfoIdx, 0x10);
    }
    else {
        dComIfGp_offCameraAttentionStatus(mCameraInfoIdx, 0x10);
    }

    if (mEventFlags >> 0x12 & 1) {
        dComIfGp_onCameraAttentionStatus(mCameraInfoIdx, 2);
    }
    else {
        if (mDistance < mCamSetup.m048) {
            if (chkFlag(0x800)) {
                dComIfGp_onCameraAttentionStatus(mCameraInfoIdx, 2);
            }
            if (chkFlag(0x10000000)) {
                dComIfGp_onCameraAttentionStatus(mCameraInfoIdx, 0x20);
            }
        }
    }

    return bVar9;
}

/* 80163EF4-801640A8       .text NotRun__9dCamera_cFv */
bool dCamera_c::NotRun() {
    clrFlag(~(0x6feb63de));

    checkGroundInfo();

    dComIfGp_offCameraAttentionStatus(mCameraInfoIdx, 0x80);

    if (dComIfGp_evmng_cameraPlay() || chkFlag(0x20000000)) {
        if (mCurType != mCamTypeEvent) {
            pushPos();

            m404 = mCurType;
        }

        mCurType = mCamTypeEvent;

        eventCamera(types[mCurType].mStyles[0][3]);

        m07C++;
        m118++;
        m108++;
        m11C++;
    }
    
    if (dComIfGp_event_getMode() != 0) {
        dComIfGp_offCameraAttentionStatus(mCameraInfoIdx, 0x48);
    }

    dComIfGp_onCameraAttentionStatus(mCameraInfoIdx, 0x14);
    
    clrFlag(0x90080);

    mForcusLine.Off();

    shakeCamera();

    m005 = 0;

    if (dComIfGp_checkCameraAttentionStatus(mCameraInfoIdx, 8)) {
        if (chkFlag(0x400000)) {
            setView(160.0f, 35.0f, 320.0f, 320.0f);
        }
        else {
            setView(0.0f, 0.0f, 640.0f, 480.0f);
        }
    }
    return TRUE;
}

/* 801640A8-801640B4       .text SetTrimSize__9dCamera_cFl */
bool dCamera_c::SetTrimSize(s32 size) {
    mTrimSize = size;
    return TRUE;
}

/* 801640B4-801640C0       .text SetTrimTypeForce__9dCamera_cFl */
bool dCamera_c::SetTrimTypeForce(s32 force) {
    mTrimTypeForce = force;
    return TRUE;
}

/* 801640C0-80164164       .text CalcTrimSize__9dCamera_cFv */
void dCamera_c::CalcTrimSize() {
    switch (mTrimSize) {
        case 0:
            mTrimHeight += -mTrimHeight * 0.25f;
            break;
        case 2:
            mTrimHeight += (mCamSetup.CinemaScopeTrimHeight() - mTrimHeight) * 0.25f;
            break;
        case 1:
            mTrimHeight += (mCamSetup.VistaTrimHeight() - mTrimHeight) * 0.25f;
            break;
        case 3:
            mTrimHeight = mCamSetup.CinemaScopeTrimHeight();
            break;
        case 4:
            mTrimHeight = 0.0f;
            break;
    }
}

/* 80164164-8016418C       .text Draw__9dCamera_cFv */
bool dCamera_c::Draw() {
    mForcusLine.Draw();
    return TRUE;
}

/* 8016418C-80164898       .text nextMode__9dCamera_cFl */
int dCamera_c::nextMode(s32 i_curMode) {
    //bool bVar1;
    //fopAc_ac_c *pfVar2;
    //uint uVar3;
    //int iVar4;
    //uint uVar5;
    //long lVar6;
    //cXyz cStack_44;
    //cXyz local_38;
    //float local_2c;
    //float local_28;
    //float local_24;
//
    //s32 next_mode = i_curMode;
    //cXyz player_pos = positionOf(mpPlayerActor);
//
    //if (!dComIfGp_evmng_cameraPlay()) {
    //    if (mBG.m58 > player_pos.y) {
    //        m1AE = 0;
    //    }
    //    switch(i_curMode) {
    //        case 4:
    //        case 10:
    //        case 11:
    //        case 13:
    //        case 14:
    //            m144 = 1;
    //            m184 = 0;
    //            break;
    //        case 5:
    //        case 6:
    //            m144 = 1;
    //            m184 = 0;
    //        case 1:
    //            mpLockonTarget = NULL;
    //        default:
    //            if (m19B == 0) {
    //                if (mStickCPosYLast > 0.0f || mStickCValueLast <= mCamSetup.m09C) {
    //                if ((i_curMode == 0 || i_curMode == 0x13) &&
    //                   (((positionOf(&cStack_44,this,mpPlayerActor), mStickMainValueLast < 0.5 &&
    //                     (uVar3 = dAttention_c::LockonTruth
    //                                        (&d_com_inf_game::g_dComIfG_gameInfo.play.mAttention),
    //                     (uVar3 & 0xff) == 0)) &&
    //                    ((d_com_inf_game::g_dComIfG_gameInfo.play.mPlayerStatus[mPadId * 2][0] &
    //                     0x100000) == 0)))) {
    //                  if (*(int *)&field_0x184 == 1) {
    //                    if (mStickCPosYLast < (mCamSetup).mCstick.field0_0x0) {
    //                      *(undefined4 *)&field_0x184 = 0;
    //                    }
    //                  }
    //                  else if (mStickCPosYLast <= (mCamSetup).mCstick.field1_0x4) {
    //                    d_com_inf_game::g_dComIfG_gameInfo.play.mCameraInfo[mCameraInfoIdx].
    //                    mCameraAttentionStatus =
    //                         d_com_inf_game::g_dComIfG_gameInfo.play.mCameraInfo[mCameraInfoIdx].
    //                         mCameraAttentionStatus | 0x400;
    //                  }
    //                  else {
    //                    d_com_inf_game::g_dComIfG_gameInfo.play.mCameraInfo[mCameraInfoIdx].
    //                    mCameraAttentionStatus =
    //                         d_com_inf_game::g_dComIfG_gameInfo.play.mCameraInfo[mCameraInfoIdx].
    //                         mCameraAttentionStatus | 0x1000;
    //                    *(undefined4 *)&field_0x184 = 1;
    //                    d_com_inf_game::g_dComIfG_gameInfo.play.mCameraInfo[mCameraInfoIdx].
    //                    mCameraAttentionStatus =
    //                         d_com_inf_game::g_dComIfG_gameInfo.play.mCameraInfo[mCameraInfoIdx].
    //                         mCameraAttentionStatus | 0x400;
    //                  }
    //                }
    //              }
    //              else {
    //                field92_0x144 = 0;
    //              }
    //            }
    //            else {
    //                m144 = 1;
    //                m184 = 0;
    //            }
//
    //            break;
    //        case 12:
    //            if (mStickCValueLast < 0.01f && mDistance < mCamSetup.m098 || chkFlag(0x80000000)) {
    //                m144 = 1;
    //                m184 = 0;
    //            }
    //            else if (m19B != 0) {
    //                m144 = 1;
    //                m184 = 0;
    //            }
//
    //            break;
    //    }
//
    //    if (chkFlag(0x4000000)) {
    //        if (m144 == 0) {
    //            m254 |= 1;
    //        }
//
    //        if (check_owner_action(mPadId, 0x80000000)) {
    //            setFlag(0x8000);
    //        }
//
    //        m144 = 1;
//
    //        clrFlag(0x4000000)
    //    }
//
    //    if (((field84_0x130 != -1) && (*(int *)&field_0x134 != 0)) &&
    //       (*(short *)(*(int *)&field_0x134 + 8) == 0x171)) {
    //      field92_0x144 = 1;
    //      lVar6 = 0;
    //    }
//
    //    if ((lVar6 == 0xc) && (field92_0x144 != 0)) {
    //      param_1 = 0;
    //    }
    //    else {
    //    uVar3 = d_com_inf_game::g_dComIfG_gameInfo.play.mPlayerStatus[mPadId * 2][0];
    //    if (((uVar3 & 0x200000) == 0) &&
    //       (uVar5 = d_com_inf_game::g_dComIfG_gameInfo.play.mPlayerStatus[mPadId * 2][1],
    //       (uVar5 & 8) == 0)) {
    //      if ((uVar3 & 0x80000080) == 0) {
    //        if ((uVar3 & 0x800000) == 0) {
    //          if ((uVar5 & 0x10) == 0) {
    //            if ((uVar3 & 0x2000) == 0) {
    //              if ((uVar3 & 0x25000) != 0) {
    //                bVar1 = true;
    //                uVar3 = dAttention_c::LockonTruth
    //                                  (&d_com_inf_game::g_dComIfG_gameInfo.play.mAttention);
    //                if (((uVar3 & 0xff) == 0) &&
    //                   ((d_com_inf_game::g_dComIfG_gameInfo.play.mAttention.mFlags & 0x20000000) == 0)
    //                   ) {
    //                  bVar1 = false;
    //                }
    //                if (!bVar1) {
    //                  param_1 = 10;
    //                  goto LAB_801647b0;
    //                }
    //              }
    //              if ((d_com_inf_game::g_dComIfG_gameInfo.play.mPlayerStatus[mPadId * 2][0] &
    //                  0x80000) != 0) {
    //                bVar1 = true;
    //                uVar3 = dAttention_c::LockonTruth
    //                                  (&d_com_inf_game::g_dComIfG_gameInfo.play.mAttention);
    //                if (((uVar3 & 0xff) == 0) &&
    //                   ((d_com_inf_game::g_dComIfG_gameInfo.play.mAttention.mFlags & 0x20000000) == 0)
    //                   ) {
    //                  bVar1 = false;
    //                }
    //                if (!bVar1) {
    //                  param_1 = 0xb;
    //                  goto LAB_801647b0;
    //                }
    //              }
    //              if (field92_0x144 == 0) {
    //                param_1 = 0xc;
    //              }
    //              else {
    //                uVar3 = d_com_inf_game::g_dComIfG_gameInfo.play.mPlayerStatus[mPadId * 2][1]
    //                ;
    //                if ((uVar3 & 2) == 0) {
    //                  if ((uVar3 & 4) == 0) {
    //                    uVar3 = d_com_inf_game::g_dComIfG_gameInfo.play.mPlayerStatus
    //                            [mPadId * 2][0];
    //                    if ((uVar3 & 0x60) == 0) {
    //                      if ((uVar3 & 0x61) == 0) {
    //                        if (((uVar3 & 0x406) == 0) || (lVar6 == 0xc)) {
    //                          uVar3 = dAttention_c::LockonTruth
    //                                            (&d_com_inf_game::g_dComIfG_gameInfo.play.mAttention);
    //                          if (((uVar3 & 0xff) == 0) ||
    //                             ((d_com_inf_game::g_dComIfG_gameInfo.play.mPlayerStatus
    //                               [mPadId * 2][0] & 0xc000000) != 0)) {
    //                            bVar1 = true;
    //                            uVar3 = dAttention_c::LockonTruth
    //                                              (&d_com_inf_game::g_dComIfG_gameInfo.play.mAttention
    //                                              );
    //                            if (((uVar3 & 0xff) == 0) &&
    //                               ((d_com_inf_game::g_dComIfG_gameInfo.play.mAttention.mFlags &
    //                                0x20000000) == 0)) {
    //                              bVar1 = false;
    //                            }
    //                            if (bVar1) {
    //                              param_1 = 1;
    //                            }
    //                            else {
    //                              iVar4 = mPadId;
    //                              uVar3 = d_com_inf_game::g_dComIfG_gameInfo.play.mPlayerStatus
    //                                      [iVar4 * 2][0];
    //                              if ((((uVar3 & 0x400000) == 0) || ((uVar3 & 0x36a02371) != 0)) ||
    //                                 ((d_com_inf_game::g_dComIfG_gameInfo.play.mPlayerStatus
    //                                   [iVar4 * 2][1] & 0x11) != 0)) {
    //                                bVar1 = false;
    //                                if (((d_com_inf_game::g_dComIfG_gameInfo.play.mPlayerStatus
    //                                      [iVar4 * 2][1] & 0x80000) != 0) ||
    //                                   (daNpc_Md_c::m_mirror != '\0')) {
    //                                  bVar1 = true;
    //                                }
    //                                if (bVar1) {
    //                                  param_1 = 0x13;
    //                                }
    //                                else if (field84_0x130 == -1) {
    //                                  if (lVar6 == 0xc) {
    //                                    if (field92_0x144 != 0) {
    //                                      param_1 = 0;
    //                                    }
    //                                  }
    //                                  else {
    //                                    param_1 = 0;
    //                                  }
    //                                }
    //                                else if (*(fopAc_ac_c **)&field_0x134 == (fopAc_ac_c *)0x0)
    //                                {
    //                                  param_1 = 0;
    //                                  field84_0x130 = -1;
    //                                }
    //                                else {
    //                                  param_1 = 2;
    //                                  mpLockonTarget = *(fopAc_ac_c **)&field_0x134;
    //                                }
    //                              }
    //                              else {
    //                                if ((mpPlayerActor->parent).parent.mProcName == 0xa9) {
    //                                  local_48 = (**(code **)(*(int *)&mpPlayerActor[1].parent.
    //                                                                   parent.mPi.mMtdTg.parent.
    //                                                                   mbAdded + 0x54))();
    //                                  pfVar2 = f_op_actor_iter::fopAcIt_Judge
    //                                                     (f_pc_searcher::fpcSch_JudgeByID,&local_48);
    //                                }
    //                                else {
    //                                  pfVar2 = (fopAc_ac_c *)0x0;
    //                                }
    //                                mpLockonTarget = pfVar2;
    //                                param_1 = 2;
    //                                field84_0x130 = -1;
    //                              }
    //                            }
    //                          }
    //                          else {
    //                            param_1 = 2;
    //                          }
    //                        }
    //                        else if (mpLockonTarget != (fopAc_ac_c *)0x0) {
    //                          param_1 = 8;
    //                        }
    //                      }
    //                      else {
    //                        param_1 = 5;
    //                      }
    //                    }
    //                    else {
    //                      param_1 = 6;
    //                    }
    //                  }
    //                  else {
    //                    param_1 = 6;
    //                  }
    //                }
    //                else {
    //                  param_1 = 5;
    //                }
    //              }
    //            }
    //            else {
    //              param_1 = 4;
    //            }
    //          }
    //          else {
    //            param_1 = 0xf;
    //          }
    //        }
    //        else if (field92_0x144 == 0) {
    //          param_1 = 0xc;
    //        }
    //        else {
    //          param_1 = 0x12;
    //        }
    //      }
    //      else {
    //        param_1 = 0x11;
    //      }
    //    }
    //    else {
    //      param_1 = 0xe;
    //    }
    //  }
    //}
    //LAB_801647b0:
    //if (param_1 != 2) {
    //  field84_0x130 = -1;
    //}
    //if ((param_1 == 0xc) && (iVar4 = mCurType, types[iVar4].mStyles[0xc] < 0)) {
    //  if ((iVar4 != mCamTypeEvent) &&
    //     (((iVar4 != mCamTypeBoat && (iVar4 != mCamTypeBoatBattle)) &&
    //      (iVar4 != mCamTypeRestrict)))) {
    //    field172_0x254 = field172_0x254 | 1;
    //  }
    //  field92_0x144 = 1;
    //  param_1 = lVar6;
    //}
    //if ((types[mCurType].mStyles[param_1] > -1) && (lVar6 = param_1, param_1 == 1)) {
    //  mEventFlags = mEventFlags | 0x100000;
    //}
    //return lVar6;
}

/* 80164898-80164A48       .text onModeChange__9dCamera_cFll */
bool dCamera_c::onModeChange(s32, s32) {
    /* Nonmatching */
}

/* 80164A48-80164CEC       .text nextType__9dCamera_cFl */
int dCamera_c::nextType(s32) {
    /* Nonmatching */
}

/* 80164CEC-80164DB4       .text onTypeChange__9dCamera_cFll */
bool dCamera_c::onTypeChange(s32, s32) {
    /* Nonmatching */
}

/* 80164DB4-80164DFC       .text SetTypeForce__9dCamera_cFPcP10fopAc_ac_c */
void dCamera_c::SetTypeForce(char*, fopAc_ac_c*) {
    /* Nonmatching */
}

/* 80164DFC-80164E2C       .text SetTypeForce__9dCamera_cFlP10fopAc_ac_c */
void dCamera_c::SetTypeForce(s32, fopAc_ac_c*) {
    /* Nonmatching */
}

/* 80164E2C-80164F5C       .text onStyleChange__9dCamera_cFll */
bool dCamera_c::onStyleChange(s32, s32) {
    /* Nonmatching */
}

/* 80164F5C-8016513C       .text GetCameraTypeFromMapToolID__9dCamera_cFll */
int dCamera_c::GetCameraTypeFromMapToolID(s32, s32) {
    /* Nonmatching */
}

/* 8016513C-801651F0       .text GetCameraTypeFromCameraName__9dCamera_cFPCc */
int dCamera_c::GetCameraTypeFromCameraName(const char*) {
    /* Nonmatching */
}

/* 801651F0-80165234       .text pushPos__9dCamera_cFv */
void dCamera_c::pushPos() {
    /* Nonmatching */
}

/* 80165234-8016528C       .text limited_range_addition__FPffff */
void limited_range_addition(f32*, f32, f32, f32) {
    /* Nonmatching */
}

/* 8016528C-801652B0       .text directionOf__9dCamera_cFP10fopAc_ac_c */
cSAngle dCamera_c::directionOf(fopAc_ac_c*) {
    /* Nonmatching */
}

/* 801652B0-801652CC       .text positionOf__9dCamera_cFP10fopAc_ac_c */
cXyz dCamera_c::positionOf(fopAc_ac_c*) {
    /* Nonmatching */
}

/* 801652CC-801652E8       .text attentionPos__9dCamera_cFP10fopAc_ac_c */
cXyz dCamera_c::attentionPos(fopAc_ac_c*) {
    /* Nonmatching */
}

/* 801652E8-801653B0       .text relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz */
cXyz dCamera_c::relationalPos(fopAc_ac_c*, cXyz*) {
    /* Nonmatching */
}

/* 801653B0-8016548C       .text relationalPos__9dCamera_cFP10fopAc_ac_cP4cXyz7cSAngle */
cXyz dCamera_c::relationalPos(fopAc_ac_c*, cXyz*, cSAngle) {
    /* Nonmatching */
}

/* 8016548C-801656AC       .text relationalPos__9dCamera_cFP10fopAc_ac_cP10fopAc_ac_cP4cXyzf */
cXyz dCamera_c::relationalPos(fopAc_ac_c*, fopAc_ac_c*, cXyz*, f32) {
    /* Nonmatching */
}

/* 801656AC-80165720       .text setDMCAngle__9dCamera_cFv */
void dCamera_c::setDMCAngle() {
    /* Nonmatching */
}

/* 80165720-80165744       .text getDMCAngle__9dCamera_cF7cSAngle */
cSAngle dCamera_c::getDMCAngle(cSAngle) {
    /* Nonmatching */
}

/* 80165744-80165800       .text pointInSight__9dCamera_cFP4cXyz */
void dCamera_c::pointInSight(cXyz*) {
    /* Nonmatching */
}

/* 80165800-80165830       .text radiusActorInSight__9dCamera_cFP10fopAc_ac_cP10fopAc_ac_c */
void dCamera_c::radiusActorInSight(fopAc_ac_c*, fopAc_ac_c*) {
    /* Nonmatching */
}

/* 80165830-80165CC4       .text radiusActorInSight__9dCamera_cFP10fopAc_ac_cP10fopAc_ac_cP4cXyzP4cXyzfs */
void dCamera_c::radiusActorInSight(fopAc_ac_c*, fopAc_ac_c*, cXyz*, cXyz*, f32, s16) {
    /* Nonmatching */
}

/* 80165CC4-801660C8       .text groundHeight__9dCamera_cFP4cXyz */
void dCamera_c::groundHeight(cXyz*) {
    /* Nonmatching */
}

/* 801660C8-80166230       .text __dt__18dBgS_CamGndChk_WtrFv */
dBgS_CamGndChk_Wtr::~dBgS_CamGndChk_Wtr() {
    /* Nonmatching */
}

/* 80166230-80166354       .text lineBGCheck__9dCamera_cFP4cXyzP4cXyzP11dBgS_LinChkUl */
bool dCamera_c::lineBGCheck(cXyz*, cXyz*, dBgS_LinChk*, u32) {
    /* Nonmatching */
}

/* 80166354-80166740       .text lineBGCheck__9dCamera_cFP4cXyzP4cXyzP4cXyzUl */
bool dCamera_c::lineBGCheck(cXyz*, cXyz*, cXyz*, u32) {
    /* Nonmatching */
}

/* 80166740-80166A04       .text lineBGCheck__9dCamera_cFP4cXyzP4cXyzUl */
bool dCamera_c::lineBGCheck(cXyz*, cXyz*, u32) {
    /* Nonmatching */
}

/* 80166A04-80166CD4       .text lineBGCheckBack__9dCamera_cFP4cXyzP4cXyzUl */
void dCamera_c::lineBGCheckBack(cXyz*, cXyz*, u32) {
    /* Nonmatching */
}

/* 80166CD4-80166D00       .text lineBGCheckBoth__9dCamera_cFP4cXyzP4cXyzP11dBgS_LinChkUl */
void dCamera_c::lineBGCheckBoth(cXyz*, cXyz*, dBgS_LinChk*, u32) {
    /* Nonmatching */
}

/* 80166D00-80166DE8       .text lineCollisionCheckBush__9dCamera_cFP4cXyzP4cXyz */
void dCamera_c::lineCollisionCheckBush(cXyz*, cXyz*) {
    /* Nonmatching */
}

/* 80166DE8-80166EA4       .text sph_chk_callback__FP11dBgS_SphChkP10cBgD_Vtx_tiiiP8cM3dGPlaPv */
void sph_chk_callback(dBgS_SphChk*, cBgD_Vtx_t*, int, int, int, cM3dGPla*, void*) {
    /* Nonmatching */
}

/* 80166EA4-80167294       .text compWallMargin__9dCamera_cFP4cXyzf */
void dCamera_c::compWallMargin(cXyz*, f32) {
    /* Nonmatching */
}

/* 80167294-801673DC       .text __dt__14dBgS_CamSphChkFv */
dBgS_CamSphChk::~dBgS_CamSphChk() {
    /* Nonmatching */
}

/* 801674F4-801675E8       .text defaultTriming__9dCamera_cFv */
void dCamera_c::defaultTriming() {
    /* Nonmatching */
}

/* 801675E8-801676C0       .text setView__9dCamera_cFffff */
void dCamera_c::setView(f32, f32, f32, f32) {
    /* Nonmatching */
}

/* 801676C0-80167F08       .text forwardCheckAngle__9dCamera_cFv */
cSAngle dCamera_c::forwardCheckAngle() {
    /* Nonmatching */
}

/* 80167F08-80168D44       .text bumpCheck__9dCamera_cFUl */
void dCamera_c::bumpCheck(u32) {
    /* Nonmatching */
}

/* 80168EF0-801693AC       .text getWaterSurfaceHeight__9dCamera_cFP4cXyz */
void dCamera_c::getWaterSurfaceHeight(cXyz*) {
    /* Nonmatching */
}

/* 801693AC-80169528       .text checkSpecialArea__9dCamera_cFv */
void dCamera_c::checkSpecialArea() {
    /* Nonmatching */
}

/* 80169528-8016A0F0       .text checkGroundInfo__9dCamera_cFv */
void dCamera_c::checkGroundInfo() {
    /* Nonmatching */
}

/* 8016A0F0-8016A110       .text followCamera2__9dCamera_cFl */
bool dCamera_c::followCamera2(s32) {
    /* Nonmatching */
}

/* 8016A110-8016C4F8       .text followCamera__9dCamera_cFl */
bool dCamera_c::followCamera(s32) {
    /* Nonmatching */
}

/* 8016C55C-8016C578       .text eyePos__9dCamera_cFP10fopAc_ac_c */
void dCamera_c::eyePos(fopAc_ac_c*) {
    /* Nonmatching */
}

/* 8016C5A4-8016C5D0       .text heightOf__9dCamera_cFP10fopAc_ac_c */
void dCamera_c::heightOf(fopAc_ac_c*) {
    /* Nonmatching */
}

/* 8016C618-8016D824       .text lockonCamera__9dCamera_cFl */
bool dCamera_c::lockonCamera(s32) {
    /* Nonmatching */
}

/* 8016D824-8016D880       .text getMsgCmdSpeaker__9dCamera_cFv */
void dCamera_c::getMsgCmdSpeaker() {
    /* Nonmatching */
}

/* 8016D880-8016D8D0       .text getMsgCmdCut__9dCamera_cFv */
void dCamera_c::getMsgCmdCut() {
    /* Nonmatching */
}

/* 8016D8D0-80170434       .text talktoCamera__9dCamera_cFl */
bool dCamera_c::talktoCamera(s32) {
    /* Nonmatching */
}

/* 80170490-801708E0       .text CalcSubjectAngle__9dCamera_cFPsPs */
void dCamera_c::CalcSubjectAngle(s16*, s16*) {
    /* Nonmatching */
}

/* 801708E0-801719C4       .text subjectCamera__9dCamera_cFl */
bool dCamera_c::subjectCamera(s32) {
    /* Nonmatching */
}

/* 801719C4-80172C20       .text towerCamera__9dCamera_cFl */
bool dCamera_c::towerCamera(s32) {
    /* Nonmatching */
}

/* 80172C20-8017346C       .text crawlCamera__9dCamera_cFl */
bool dCamera_c::crawlCamera(s32) {
    /* Nonmatching */
}

/* 8017346C-80173E40       .text hookshotCamera__9dCamera_cFl */
bool dCamera_c::hookshotCamera(s32) {
    /* Nonmatching */
}

/* 80173E40-80174E98       .text tornadoCamera__9dCamera_cFl */
bool dCamera_c::tornadoCamera(s32) {
    /* Nonmatching */
}

/* 80174E98-8017623C       .text rideCamera__9dCamera_cFl */
bool dCamera_c::rideCamera(s32) {
    /* Nonmatching */
}

/* 8017623C-80176F54       .text hungCamera__9dCamera_cFl */
bool dCamera_c::hungCamera(s32) {
    /* Nonmatching */
}

/* 80176F54-8017793C       .text vomitCamera__9dCamera_cFl */
bool dCamera_c::vomitCamera(s32) {
    /* Nonmatching */
}

/* 8017793C-801787B8       .text shieldCamera__9dCamera_cFl */
bool dCamera_c::shieldCamera(s32) {
    /* Nonmatching */
}

/* 801787B8-801795C8       .text manualCamera__9dCamera_cFl */
bool dCamera_c::manualCamera(s32) {
    /* Nonmatching */
}

/* 801795C8-801799C0       .text nonOwnerCamera__9dCamera_cFl */
bool dCamera_c::nonOwnerCamera(s32) {
    /* Nonmatching */
}

/* 801799C0-80179F8C       .text fixedFrameCamera__9dCamera_cFl */
bool dCamera_c::fixedFrameCamera(s32) {
    /* Nonmatching */
}

/* 80179F8C-8017A80C       .text fixedPositionCamera__9dCamera_cFl */
bool dCamera_c::fixedPositionCamera(s32) {
    /* Nonmatching */
}

/* 8017A80C-8017B144       .text eventCamera__9dCamera_cFl */
bool dCamera_c::eventCamera(s32) {
    /* Nonmatching */
}

/* 8017B144-8017B14C       .text demoCamera__9dCamera_cFl */
bool dCamera_c::demoCamera(s32) {
    /* Nonmatching */
}

/* 8017B14C-8017B154       .text letCamera__9dCamera_cFl */
bool dCamera_c::letCamera(s32) {
    /* Nonmatching */
}

/* 8017B154-8017B18C       .text Set__9dCamera_cF4cXyz4cXyz */
void dCamera_c::Set(cXyz, cXyz) {
    /* Nonmatching */
}

/* 8017B18C-8017B1EC       .text Set__9dCamera_cF4cXyz4cXyzfs */
void dCamera_c::Set(cXyz, cXyz, f32, s16) {
    /* Nonmatching */
}

/* 8017B1EC-8017B24C       .text Set__9dCamera_cF4cXyz4cXyzsf */
void dCamera_c::Set(cXyz, cXyz, s16, f32) {
    /* Nonmatching */
}

/* 8017B24C-8017B31C       .text Reset__9dCamera_cF4cXyz4cXyzfs */
void dCamera_c::Reset(cXyz, cXyz, f32, s16) {
    /* Nonmatching */
}

/* 8017B31C-8017B3D8       .text Reset__9dCamera_cF4cXyz4cXyz */
void dCamera_c::Reset(cXyz, cXyz) {
    /* Nonmatching */
}

/* 8017B3D8-8017B494       .text Reset__9dCamera_cFv */
void dCamera_c::Reset() {
    /* Nonmatching */
}

/* 8017B494-8017B4C4       .text ResetView__9dCamera_cFv */
void dCamera_c::ResetView() {
    /* Nonmatching */
}

/* 8017B4C4-8017B51C       .text Chtyp__9dCamera_cFl */
bool dCamera_c::Chtyp(s32) {
    /* Nonmatching */
}

/* 8017B51C-8017B524       .text U2__9dCamera_cFv */
void dCamera_c::U2() {
    /* Nonmatching */
}

/* 8017B524-8017BA50       .text shakeCamera__9dCamera_cFv */
void dCamera_c::shakeCamera() {
    /* Nonmatching */
}

/* 8017BA50-8017BB8C       .text StartShake__9dCamera_cFlPUcl4cXyz */
void dCamera_c::StartShake(s32, u8*, s32, cXyz) {
    /* Nonmatching */
}

/* 8017BB8C-8017BBA4       .text StopShake__9dCamera_cFv */
void dCamera_c::StopShake() {
    /* Nonmatching */
}

/* 8017BBA4-8017BBF0       .text ResetBlure__9dCamera_cFi */
void dCamera_c::ResetBlure(int) {
    /* Nonmatching */
}

/* 8017BBF0-8017BBF8       .text SetBlureAlpha__9dCamera_cFf */
void dCamera_c::SetBlureAlpha(f32) {
    /* Nonmatching */
}

/* 8017BBF8-8017BC08       .text SetBlureScale__9dCamera_cFfff */
void dCamera_c::SetBlureScale(f32, f32, f32) {
    /* Nonmatching */
}

/* 8017BC08-8017BC1C       .text SetBlureScale__9dCamera_cFf */
void dCamera_c::SetBlureScale(f32) {
    /* Nonmatching */
}

/* 8017BC1C-8017BC74       .text SetBlurePosition__9dCamera_cFfff */
void dCamera_c::SetBlurePosition(f32, f32, f32) {
    /* Nonmatching */
}

/* 8017BC74-8017BC7C       .text SetBlurePositionType__9dCamera_cFi */
void dCamera_c::SetBlurePositionType(int) {
    /* Nonmatching */
}

/* 8017BC7C-8017BC84       .text SetBlureTimer__9dCamera_cFl */
void dCamera_c::SetBlureTimer(s32) {
    /* Nonmatching */
}

/* 8017BC84-8017BC9C       .text SubjectLockOn__9dCamera_cFP10fopAc_ac_c */
void dCamera_c::SubjectLockOn(fopAc_ac_c*) {
    /* Nonmatching */
}

/* 8017BC9C-8017BCB8       .text SubjectLockOff__9dCamera_cFv */
void dCamera_c::SubjectLockOff() {
    /* Nonmatching */
}

/* 8017BCB8-8017BCEC       .text GetForceLockOnActor__9dCamera_cFv */
fopAc_ac_c* dCamera_c::GetForceLockOnActor() {
    /* Nonmatching */
}

/* 8017BCEC-8017BD2C       .text ForceLockOn__9dCamera_cFUi */
void dCamera_c::ForceLockOn(fpc_ProcID) {
    /* Nonmatching */
}

/* 8017BD2C-8017BD5C       .text ForceLockOff__9dCamera_cFUi */
void dCamera_c::ForceLockOff(fpc_ProcID) {
    /* Nonmatching */
}

/* 8017BD5C-8017BD7C       .text SetExtendedPosition__9dCamera_cFP4cXyz */
void dCamera_c::SetExtendedPosition(cXyz*) {
    /* Nonmatching */
}

/* 8017BD7C-8017BD90       .text ScopeViewMsgModeOff__9dCamera_cFv */
void dCamera_c::ScopeViewMsgModeOff() {
    /* Nonmatching */
}

/* 8017BD90-8017BD9C       .text dCam_isManual__FP12camera_class */
void dCam_isManual(camera_class*) {
    /* Nonmatching */
}

/* 8017BD9C-8017BDC0       .text dCam_getAngleY__FP12camera_class */
s16 dCam_getAngleY(camera_class*) {
    /* Nonmatching */
}

/* 8017BDC0-8017BDC8       .text dCam_getAngleX__FP12camera_class */
s16 dCam_getAngleX(camera_class*) {
    /* Nonmatching */
}

/* 8017BDC8-8017BDEC       .text dCam_getControledAngleY__FP12camera_class */
s16 dCam_getControledAngleY(camera_class*) {
    /* Nonmatching */
}

/* 8017BDEC-8017BDFC       .text dCam_getCamera__Fv */
camera_class* dCam_getCamera() {
    /* Nonmatching */
}

/* 8017BDFC-8017BE20       .text dCam_getBody__Fv */
dCamera_c* dCam_getBody() {
    /* Nonmatching */
}

/* 8017BE20-8017BEB0       .text preparation__FP20camera_process_class */
void preparation(camera_process_class*) {
    /* Nonmatching */
}

/* 8017BEB0-8017BFAC       .text view_setup__FP20camera_process_class */
void view_setup(camera_process_class*) {
    /* Nonmatching */
}

/* 8017BFAC-8017C29C       .text store__FP20camera_process_class */
void store(camera_process_class*) {
    /* Nonmatching */
}

/* 8017C29C-8017C350       .text camera_execute__FP20camera_process_class */
void camera_execute(camera_process_class*) {
    /* Nonmatching */
}

/* 8017C350-8017C72C       .text camera_draw__FP20camera_process_class */
void camera_draw(camera_process_class*) {
    /* Nonmatching */
}

/* 8017C72C-8017C7E4       .text init_phase1__FP12camera_class */
int init_phase1(camera_class* i_this) {
    int camera_id = fopCamM_GetParam(i_this); // get_camera_id(i_this);
    
    dComIfGp_setCamera(camera_id, i_this);
    fopCamM_SetPrm1(i_this, dComIfGp_getCameraWinID(camera_id));
    fopCamM_SetPrm2(i_this, dComIfGp_getCameraPlayer1ID(camera_id));
    fopCamM_SetPrm3(i_this, dComIfGp_getCameraPlayer2ID(camera_id));
    
    Vec local_18 = {1000000.0f, 1000000.0f, 1000000.0f};

    mDoAud_getCameraInfo(&local_18, j3dSys.getViewMtx(), camera_id);

    dComIfGp_setWindowNum(0);
    mDoGph_gInf_c::onAutoForcus();
    return cPhs_NEXT_e;
}

/* 8017C7E4-8017C980       .text init_phase2__FP12camera_class */
int init_phase2(camera_class* i_this) {
    camera_process_class* a_this = (camera_process_class*)i_this;
    dCamera_c* body = &i_this->mCamera;
    int camId = fopCamM_GetParam(i_this);

    fopAc_ac_c* player = (fopAc_ac_c*)dComIfGp_getPlayer(dComIfGp_getCameraPlayer1ID(fopCamM_GetParam(i_this))); // get_player_actor(i_this)
    
    if (player == NULL) {
        return cPhs_INIT_e;
    }

    fopAcM_setStageLayer(player);
    
    dComIfGp_setWindowNum(1);
    
    new (body) dCamera_c(i_this);

    float farPlane = 160000.0f;

    if (dComIfGp_getStage().getStagInfo() != NULL) {
        dStage_stageDt_c* stage_dt = &dComIfGp_getStage();
        stage_dt->getStagInfo();

        farPlane = stage_dt->getStagInfo()->mFarPlane;
    }

    view_port_class* viewPort = dComIfGp_getWindow(dComIfGp_getCameraWinID(camId))->getViewPort(); //get_window(camId)
    
    fopCamM_SetNear(i_this, 1.0f);
    fopCamM_SetFar(i_this, farPlane);
    fopCamM_SetFovy(i_this, 30.0f);
    fopCamM_SetAspect(i_this, viewPort->mWidth / viewPort->mHeight * g_HIO.getAspectRatio());
    fopCamM_SetCenter(i_this, player->current.pos.x, player->current.pos.y, player->current.pos.z);
    fopCamM_SetBank(i_this, 0);
        
    store(i_this);
    
    view_setup(i_this);
    
    return cPhs_NEXT_e;
}

/* 8017C980-8017C9B0       .text camera_create__FP12camera_class */
cPhs_State camera_create(camera_class* i_this) {
    static request_of_phase_process_fn l_method[3] = {
        (request_of_phase_process_fn)init_phase1,
        (request_of_phase_process_fn)init_phase2,
        (request_of_phase_process_fn)NULL,
    };

    return dComLbG_PhaseHandler(&i_this->phase_request, l_method, i_this);
}

/* 8017C9B0-8017C9DC       .text camera_delete__FP20camera_process_class */
bool camera_delete(camera_process_class* i_this) {
    /* Fakematch, instruction swap */
    dCamera_c* camera = &((camera_class*)i_this)->mCamera;
    camera->~dCamera_c();
    return TRUE;
}

/* 8017C9DC-8017C9E4       .text is_camera_delete__FPv */
bool is_camera_delete(void*) {
    return TRUE;
}

/* 8017C9E4-8017CA7C       .text Init__14dCamForcusLineFv */
void dCamForcusLine::Init() {
    m49 = 0;
    m48 = 1;
    m38 = cXyz(320.0f, 240.0f, 0.0f);
    
    m44.r = 0xFF;
    m44.g = 0xFF;
    m44.b = 0xFF;
    m44.a = 0x60;

    m4C = 100;
    m50 = 100;
    m54 = 100;
    m58 = 0x50;
    m5A = 0;
    m5C = 4;
    m5E = 4;
    m68 = 180.0f;
    m6C = 0.0f;
    m60 = 180.0f;
    m64 = 60.0f;
}

/* 8017CA7C-8017CB00       .text Draw__14dCamForcusLineFv */
void dCamForcusLine::Draw() {
    if (m49) {
        if (m48 == 0) {
            mEffectLine.initRnd(m4C, m50, m54);
        }

        mEffectLine.update(m38, m44, m58, m5A, m5C, m5E, m60, m64, m68, m6C);
    }
}

/* 8017CB00-8017CB18       .text Off__14dCamForcusLineFv */
bool dCamForcusLine::Off() {
    m49 = 0;
    return m49 == 0;
}
